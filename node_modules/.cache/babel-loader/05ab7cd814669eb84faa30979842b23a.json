{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAk2_P-E8-5htFkZejUrDI768QPOjE9PaI\",\n  authDomain: \"crown-db-a3da8.firebaseapp.com\",\n  databaseURL: \"https://crown-db-a3da8.firebaseio.com\",\n  projectId: \"crown-db-a3da8\",\n  storageBucket: \"crown-db-a3da8.appspot.com\",\n  messagingSenderId: \"775876855110\",\n  appId: \"1:775876855110:web:bec14d3fa285b750d25147\",\n  measurementId: \"G-3QD1V11ZNX\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/akash/crwn-clothing/crwn-clothing/src/firebase/firebase.utils.jsx"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,gCAFD;AAGXC,EAAAA,WAAW,EAAE,uCAHF;AAIXC,EAAAA,SAAS,EAAE,gBAJA;AAKXC,EAAAA,aAAa,EAAE,4BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAC,OAAMC,QAAN,EAAeC,cAAf,KAAgC;AACvE,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAACC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAd;AACA,QAAMC,QAAQ,GAAC,MAAMJ,OAAO,CAACK,GAAR,EAArB;;AAGA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AACrB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAqBV,QAA3B;AACA,UAAMW,SAAS,GAAC,IAAIC,IAAJ,EAAhB;;AAEA,QAAG;AACH,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMC,KAPD,CAOE,OAAMa,KAAN,EAAY;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACC;AACA;;AACD,SAAOf,OAAP;AAEC,CAxBM;AA6BPb,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB;AAEA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyAk2_P-E8-5htFkZejUrDI768QPOjE9PaI\",\n    authDomain: \"crown-db-a3da8.firebaseapp.com\",\n    databaseURL: \"https://crown-db-a3da8.firebaseio.com\",\n    projectId: \"crown-db-a3da8\",\n    storageBucket: \"crown-db-a3da8.appspot.com\",\n    messagingSenderId: \"775876855110\",\n    appId: \"1:775876855110:web:bec14d3fa285b750d25147\",\n    measurementId: \"G-3QD1V11ZNX\"\n  };\n\nexport const createUserProfileDocument=async(userAuth,additionalData)=>{\nif(!userAuth) return;\n\nconst userRef=firestore.doc(`users/${userAuth.uid}`);\nconst snapshot=await userRef.get();\n\n\nif(!snapshot.exists) {\nconst {displayName, email}=userAuth;\nconst createdAt=new Date();\n\ntry{\nawait userRef.set({\n  displayName,\n  email,\n  createdAt,\n  ...additionalData\n})\n} catch(error){\nconsole.log('error creating user', error.message);\n}\n}\nreturn userRef;\n\n};\n\n\n\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}